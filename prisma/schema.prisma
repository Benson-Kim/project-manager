// prisma/schema.prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
}

model User {
    id                       String              @id @default(uuid())
    email                    String              @unique
    password                 String? // Optional since stakeholders might not need login
    resetToken               String?
    resetTokenExpiry         DateTime?
    firstName                String
    lastName                 String
    departmentOrOrganization String?
    phoneNumber              String?
    phoneExt                 String?
    mobile                   String?
    physicalLocation         String?
    orgTitle                 String?
    communicationPreference  String? // EMAIL, PHONE, MOBILE
    engagementLevel          String? // HIGH, MEDIUM, LOW
    additionalNotes          String?
    role                     String // ADMIN, PROJECT_MANAGER, TEAM_MEMBER, STAKEHOLDER
    createdAt                DateTime            @default(now())
    updatedAt                DateTime            @updatedAt
    projects                 Project[] // Projects created by user
    assignments              Task[] // Tasks assigned to user
    memberships              ProjectMember[] // Projects user is member of
    MeetingAttendee          MeetingAttendee[]
    ActionItem               MeetingActionItem[]
    milestonesLed            Milestone[]         @relation(name: "MilestoneLeader")
    milestonesAssigned       Milestone[]         @relation(name: "MilestoneAssignee")
}

model Milestone {
    id          String   @id @default(uuid())
    name        String
    description String?
    leaderId    String
    leader      User     @relation(name: "MilestoneLeader", fields: [leaderId], references: [id])
    startDate   DateTime
    endDate     DateTime
    budget      Float?
    status      String // PLANNED, IN_PROGRESS, COMPLETED, DELAYED
    progress    Float    @default(0)
    projectId   String
    project     Project  @relation(fields: [projectId], references: [id])
    assigneeId  String?
    assignee    User?    @relation(name: "MilestoneAssignee", fields: [assigneeId], references: [id])

    // Many-to-Many Relation with Tasks
    tasks Task[] @relation(name: "MilestoneTasks")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([projectId])
    @@index([leaderId])
    @@index([assigneeId])
}

model Project {
    id                    String                 @id @default(uuid())
    name                  String
    description           String?
    startDate             DateTime
    endDate               DateTime
    status                String // PLANNING, IN_PROGRESS, ON_HOLD, COMPLETED
    budget                Float?
    createdById           String
    createdBy             User                   @relation(fields: [createdById], references: [id])
    createdAt             DateTime               @default(now())
    updatedAt             DateTime               @updatedAt
    tasks                 Task[]
    members               ProjectMember[]
    resources             Resource[]
    meetings              Meeting[]
    milestones            Milestone[]
    stakeholders          Stakeholder[]
    acronyms              Acronym[]
    keyDeliverables       KeyDeliverable[]
    objectives            Objective[]
    questionAnswers       QuestionAnswer[]
    suppliers             Supplier[]
    assumptionConstraints AssumptionConstraint[]
    parkingLotItems       ParkingLotItem[]
    itResources           ITResource[]
    financials            Financial[]
    issueRisks            IssueRisk[]
    dailyActivities       DailyActivity[]
    notes                 Note[]

    @@index([createdById])
}

model Task {
    id          String   @id @default(uuid())
    title       String
    description String?
    startDate   DateTime
    endDate     DateTime
    status      String // NOT_STARTED, IN_PROGRESS, COMPLETED, ON_HOLD
    progress    Float    @default(0)
    priority    String   @default("MEDIUM") // LOW, MEDIUM, HIGH

    // WBS specific fields
    parentId String?
    position Int     @default(0)
    parent   Task?   @relation("TaskHierarchy", fields: [parentId], references: [id])
    children Task[]  @relation("TaskHierarchy")

    // Gantt specific fields
    dependencies  String?
    milestone     Boolean   @default(false)
    critical      Boolean   @default(false)
    baselineStart DateTime?
    baselineEnd   DateTime?

    // Relations
    project    Project    @relation(fields: [projectId], references: [id])
    projectId  String
    assignee   User?      @relation(fields: [assigneeId], references: [id])
    assigneeId String?
    resources  Resource[]

    // Many-to-Many Relation with Milestones
    milestones Milestone[] @relation(name: "MilestoneTasks")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([projectId])
    @@index([assigneeId])
    @@index([parentId])
}

model ProjectMember {
    id              String    @id @default(uuid())
    role            String // CLIENT, PROJECT_MANAGER, TEAM_MEMBER, STAKEHOLDER
    roleDescription String?
    project         Project   @relation(fields: [projectId], references: [id])
    projectId       String
    user            User      @relation(fields: [userId], references: [id])
    userId          String
    joinedAt        DateTime  @default(now())
    comments        Comment[] // Add this relation

    @@unique([projectId, userId])
    @@index([projectId])
    @@index([userId])
}

model Comment {
    id              String        @id @default(uuid())
    content         String
    projectMember   ProjectMember @relation(fields: [projectMemberId], references: [id])
    projectMemberId String
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt

    @@index([projectMemberId])
}

model Resource {
    id        String   @id @default(uuid())
    name      String
    type      String // HUMAN, MATERIAL, EQUIPMENT
    capacity  Float    @default(100) // Percentage
    cost      Float? // Cost per hour/unit
    tasks     Task[]
    project   Project  @relation(fields: [projectId], references: [id])
    projectId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([projectId])
}

model Meeting {
    id          String              @id @default(cuid())
    projectId   String
    title       String
    date        DateTime
    startTime   DateTime
    endTime     DateTime
    location    String
    status      MeetingStatus       @default(SCHEDULED)
    agenda      String
    minutes     String
    decisions   MeetingDecision[]
    actionItems MeetingActionItem[]
    attendees   MeetingAttendee[]
    project     Project             @relation(fields: [projectId], references: [id])
    createdAt   DateTime            @default(now())
    updatedAt   DateTime            @updatedAt
}

model MeetingAttendee {
    id        String           @id @default(cuid())
    meetingId String
    userId    String
    status    AttendanceStatus @default(PENDING)
    meeting   Meeting          @relation(fields: [meetingId], references: [id])
    user      User             @relation(fields: [userId], references: [id])
}

model MeetingActionItem {
    id          String           @id @default(cuid())
    meetingId   String
    assignedTo  String
    title       String
    description String
    dueDate     DateTime
    status      ActionItemStatus @default(OPEN)
    priority    Priority         @default(MEDIUM)
    meeting     Meeting          @relation(fields: [meetingId], references: [id])
    assignee    User             @relation(fields: [assignedTo], references: [id])
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt
}

model MeetingDecision {
    id          String   @id @default(cuid())
    meetingId   String
    title       String
    description String
    meeting     Meeting  @relation(fields: [meetingId], references: [id])
    createdAt   DateTime @default(now())
}

// Add these models to your existing schema.prisma file

model Stakeholder {
    id           String   @id @default(uuid())
    name         String
    role         String
    organization String?
    contactInfo  String?
    influence    String? // HIGH, MEDIUM, LOW
    interest     String? // HIGH, MEDIUM, LOW
    projectId    String
    project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@index([projectId])
}

model Acronym {
    id         String   @id @default(uuid())
    acronym    String
    definition String
    projectId  String
    project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@index([projectId])
}

model KeyDeliverable {
    id          String    @id @default(uuid())
    name        String
    description String?
    dueDate     DateTime?
    status      String // PLANNED, IN_PROGRESS, COMPLETED
    projectId   String
    project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@index([projectId])
}

model Objective {
    id          String   @id @default(uuid())
    title       String
    description String?
    measurable  String?
    projectId   String
    project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([projectId])
}

model QuestionAnswer {
    id         String   @id @default(uuid())
    question   String
    answer     String?
    status     String // OPEN, ANSWERED, CLOSED
    askedBy    String?
    answeredBy String?
    projectId  String
    project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@index([projectId])
}

model Supplier {
    id              String   @id @default(uuid())
    name            String
    contactPerson   String?
    contactInfo     String?
    serviceProvided String?
    contractDetails String?
    projectId       String
    project         Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    @@index([projectId])
}

model AssumptionConstraint {
    id          String   @id @default(uuid())
    type        String // ASSUMPTION, CONSTRAINT
    description String
    impact      String?
    status      String? // VALID, INVALID, UNCERTAIN
    projectId   String
    project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([projectId])
}

model ParkingLotItem {
    id          String   @id @default(uuid())
    title       String
    description String?
    priority    String? // HIGH, MEDIUM, LOW
    status      String // PENDING, IN_REVIEW, RESOLVED
    projectId   String
    project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([projectId])
}

model ITResource {
    id         String    @id @default(uuid())
    name       String
    type       String // HARDWARE, SOFTWARE, PERSONNEL
    quantity   Int?
    allocation String?
    startDate  DateTime?
    endDate    DateTime?
    projectId  String
    project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt

    @@index([projectId])
}

model Financial {
    id            String    @id @default(uuid())
    category      String // BUDGET, EXPENSE, REVENUE
    amount        Float
    description   String?
    date          DateTime?
    paymentStatus String? // PENDING, PAID
    projectId     String
    project       Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    @@index([projectId])
}

model IssueRisk {
    id          String   @id @default(uuid())
    type        String // ISSUE, RISK
    title       String
    description String?
    impact      String? // HIGH, MEDIUM, LOW
    probability String? // HIGH, MEDIUM, LOW
    mitigation  String?
    status      String // OPEN, MITIGATED, CLOSED
    projectId   String
    project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([projectId])
}

model DailyActivity {
    id          String   @id @default(uuid())
    date        DateTime
    activity    String
    performedBy String?
    status      String // PLANNED, COMPLETED, BLOCKED
    notes       String?
    projectId   String
    project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([projectId])
}

model Note {
    id        String   @id @default(uuid())
    title     String
    content   String
    category  String?
    projectId String
    project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([projectId])
}

enum MeetingStatus {
    SCHEDULED
    IN_PROGRESS
    COMPLETED
    CANCELLED
}

enum AttendanceStatus {
    PENDING
    CONFIRMED
    DECLINED
}

enum ActionItemStatus {
    OPEN
    IN_PROGRESS
    COMPLETED
    BLOCKED
}

enum Priority {
    LOW
    MEDIUM
    HIGH
    URGENT
}
